// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Murtain.OAuth2.Infrastructure;

namespace Murtain.OAuth2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("identity_role");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_roleclaim");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<long?>("UserPropertyId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("UserPropertyId");

                    b.ToTable("identity_user");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_claim");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_login");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserProperty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Avatar")
                        .HasMaxLength(2000);

                    b.Property<string>("Birthday")
                        .HasMaxLength(50);

                    b.Property<int>("Gender")
                        .HasMaxLength(50);

                    b.Property<string>("NickName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("identity_user_property");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_user_role");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserToken", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("identity_user_token");
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityRoleClaim", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserProperty", "UserProperty")
                        .WithMany()
                        .HasForeignKey("UserPropertyId");

                    b.OwnsOne("Murtain.OAuth2.Domain.Aggregates.User.Address", "Address", b1 =>
                        {
                            b1.Property<long>("IdentityUserId");

                            b1.Property<string>("City")
                                .HasMaxLength(50);

                            b1.Property<string>("Country")
                                .HasMaxLength(50);

                            b1.Property<string>("Province")
                                .HasMaxLength(50);

                            b1.Property<string>("Street")
                                .HasMaxLength(250);

                            b1.ToTable("identity_user");

                            b1.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser")
                                .WithOne("Address")
                                .HasForeignKey("Murtain.OAuth2.Domain.Aggregates.User.Address", "IdentityUserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserClaim", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserLogin", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserRole", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Murtain.OAuth2.Domain.Aggregates.User.IdentityUserToken", b =>
                {
                    b.HasOne("Murtain.OAuth2.Domain.Aggregates.User.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
